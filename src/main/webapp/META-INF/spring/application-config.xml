<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:int="http://www.springframework.org/schema/integration"
	xmlns:int-kafka="http://www.springframework.org/schema/integration/kafka"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd
		http://www.springframework.org/schema/integration
            http://www.springframework.org/schema/integration/spring-integration-3.0.xsd
            http://www.springframework.org/schema/integration/kafka http://www.springframework.org/schema/integration/kafka/spring-integration-kafka.xsd">


	<import resource="security-config.xml" />

	<import resource="infrastructure-config.xml" />

	<import resource="hadoop.xml" />

	<context:component-scan base-package="net.iicaptain"></context:component-scan>

	<bean id="creator" class="net.iicaptain.homeport.impl.CreatorServiceImpl">
		<property name="pathToJSFile" value="/js/Creator.js"></property>
	</bean>

	<int:channel id="locationsToBackend"></int:channel>
	<int:channel id="worldsToBackend"></int:channel>

<!-- 
	<bean id="kafkaAdaptor" class="net.iicaptain.homeport.kafka.KafkaAdapter">
		<constructor-arg name="brokerList" value="tomcatvm:9092" />
		<constructor-arg name="serializer" value="kafka.serializer.StringEncoder" />
		<constructor-arg name="partitioner"
			value="kafka.producer.DefaultPartitioner" />
		<constructor-arg name="acks" value="1" />
	</bean>

	<int:service-activator input-channel="locationsToBackend"
		ref="kafkaAdaptor" method="sendLocations" />
	<int:service-activator input-channel="worldsToBackend"
		ref="kafkaAdaptor" method="sendWorlds" />
 -->
 
	<bean id="flumeAdaptor" class="com.hortonworks.digitalemil.flume.MyRpcClientFacade"> 
		<constructor-arg name="hostname" value="tomcatvm" /> <constructor-arg name="port" 
		value="44444" /> </bean> 
	<int:service-activator input-channel="locationsToBackend" ref="flumeAdaptor" 
		method="sendLocations" /> <int:service-activator input-channel="worldsToBackend" 
		ref="flumeAdaptor" method="sendWorlds" /> 

</beans>
